nc <- ncol (y)
means <- numeric (nc)
for (i in 1:nc){
means[i] <- mean(y [,i])
}
}
getwd()
dir()
dir()
dir()
getwd()
dir()
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean <- function (directory, pollutant, id = 1:332){
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_list[i]))
}
median(dat[, pollutant], na.rm=TRUE)
}
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
warnings()
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", 1)
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
class(dat)
corr("specdata")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata")
corr("specdata")
corr("specdata")
source("corr.R")
corr("specdata")
source("corr.R")
corr("specdata",500)
source("corr.R")
corr("specdata",500)
source("corr.R")
corr("specdata",500)
corr("specdata")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
source("corr.R")
corr("specdata",100)
corr("specdata",500)
source("corr.R")
corr("specdata",500)
source("corr.R")
corr("specdata",500)
source("corr.R")
corr("specdata",500)
source("pollutaneman.R")
source("pollutantmean.R")
pollutantmean("specdata")
pollutantmean("specdata",22)
pollutantmean("specdata","sulphate",22)
pollutantmean("specdata","sulfate",22)
source("corr.R")
corr("specdata",500)
source("corr.R")
corr("specdata",500)
source("corr.R")
corr("specdata",500)
source("corr.R")
corr("specdata",500)
cr <- corr("specdata", 400)
head(cr)
source("corr.R")
cr <- corr("specdata", 400)
head(cr)
source("corr.R")
cr <- corr("specdata", 400)
head(cr)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
source("complete.R")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(datasets)
head(airquality)
s<- split (airquality, airquality$Month)
s
lapply(s,function(x) colMeans(,c("Ozone","Solar.R","Wind")))
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm = TRUE))
install.packages("RSQLServer")
install.packages("RSQLServer", dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages("DBI")
uDv <- dbConnect(MySQL(), user="genome", host = "genome-mysql.cse.ucsc.edu")
library("DBI")
uDv <- dbConnect(MySQL(), user="genome", host = "genome-mysql.cse.ucsc.edu")
install.packages('RMySQL')
library(RMySQL)
uDv <- dbConnect(MySQL(), user="genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uDv,"show databases;"); dbDisconnect(uDv)
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19" host = "genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
source("http://bioconductor.org/biolite.R")
dbDisconnect(hg19)
source("http://bioconductor.org/bioclite.R")
source("https://bioconductor.org/bioclite.R")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
install.packages("XML")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url,userInternalNodes=T)
html <- htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
html <- htmlTreeParse(url)
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Coursera_Sakib",
key = "009126ec01573e855bf5",
secret = "b9e2793066b570231ec725f5529fac2fafc0950a")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Coursera_Sakib",
key = "009126ec01573e855bf5",
secret = "b9e2793066b570231ec725f5529fac2fafc0950a")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
# Take action on http error
stop_for_status(req)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "jtleek/datasharing", "created_at"]
install.packages("sqldf")
library("sqldf")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table::data.table(read.csv(f))
install.packages("data.table")
acs <- data.table::data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP \lt< 50 and pwgtp1")
sqldf("select * from acs")
sqldf("select * from acs")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n = 10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
w
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12",
"filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler",
"sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header = FALSE, skip = 4, col.names = colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
if(!file.exists("./data"){(dir.create("./data")}
if(!file.exists("./data")){(dir.create("./data")}
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file( fileUrl,destfile= "./data/restaurants.csv")
restData <- read.csv("data/restaurants.csv")
head(restData)
summary(restData)
table(restData$zipCode,useNA="ifany")
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode>0)
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data =DF)
xt
ftable(Xt)
ftable(xt)
fake <- rnorm(1e5)
object.size(fake)
print(object.size(fake),units ="Mb")
head(restData)
s1 <- seq(1,10,by=2); s1
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
str(restData)
library(Hmisc)
install.packages(Hmisc)
install.packages(Hmisc.r)
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
library(plyr)
restData2 = mutate(restData,zipGroups =cut2(zipCode,g=4))
table(restData2$zipGroups)
remove(list=ls9)
remove(list=ls())
ls()
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear",
"cyl"),measure.vars=c("mpg","hp"))
carMelt <- melt(mtcars,id=c("carname","gear",
"cyl"),measure.vars=c("mpg","hp"))
library(reshape2)
carMelt <- melt(mtcars,id=c("carname","gear",
"cyl"),measure.vars=c("mpg","hp"))
head(carMelt,n=3)
tail(carMelt,n=3)
tail(mtcars)
cylData <- dcast(carMelt,cyl~variable)
cylData
cylData <- dcast(carMelt, cyl~variable,mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns = split(InsectSprays$count,InsectSprays$spray)
spIns
sprCount = lapply(spIns,sum)
sprCount
unlist(sprCount)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library(dyplyr)
install.packages("dyplyr")
install.packages("dplyr")
library(dplyr)
chicago <- readRDS("chicago.rds")
packages <- c("data.table", "jpeg")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
head(dt)
str(dt
)
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)[1:3]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode = "wb")
img <- readJPEG(f, native = TRUE)
library(jpeg)
install.packages("jpeg")
library(jpeg)
img <- readJPEG(f, native = TRUE)
quantile(img, probs = c(0.3, 0.8))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))dtEd <- data.table(read.csv(f))
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
str(dt)
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing = TRUE), list(CountryCode, Long.Name.x, Long.Name.y,
rankingGDP, gdp)][13]
dt[, mean(rankingGDP, na.rm = TRUE), by = Income.Group]
breaks <- quantile(dt$rankingGDP, probs = seq(0, 1, 0.2), na.rm = TRUE)
dt$quantileGDP <- cut(dt$rankingGDP, breaks = breaks)
dt[Income.Group == "Lower middle income", .N, by = c("Income.Group", "quantileGDP")]
library(data.table)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "quiz4data.csv")
d <- read.csv("quiz4data.csv")
strsplit(names(d), split = "wgtp")[123]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "quiz4data.csv")
data <- read.csv("quiz4data.csv")
clean <- gsub(",","",data[,5])
data[5]
mean(as.numeric(clean[1:215]),na.rm = TRUE)
head(d)
str(d)
head(data)
std(data)
str(data)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "quiz4data2.csv")
data2 <- read.csv("quiz4data2.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "quiz4data3.csv")
data3 <- read.csv("quiz4data3.csv")
setnames(data2, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
all <- merge(data2, data3, by = "CountryCode")
table(grepl("june", tolower(all$Special.Notes)), grepl("fiscal year end", tolower(all$Special.Notes)))[4]
library(quantmod)
install.packages("quantmod")
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(amzn)
str(amzn)
head(sampleTimes)
amzn <- getSymbols("AMZN", auto.assign = FALSE)
sampleTimes <- index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
length(grep("^2012",sampleTimes))
library(lubridate)
sampleTimes[grep("^2012",sampleTimes)]
sum(weekdays(as.Date(sampleTimes[grep("^2012",sampleTimes)]))=="Monday")
library(dplyr)
filename <- "Coursera_DS3_Final.zip"
# Checking if archieve already exists.
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n","functions"))
head(features)
activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")
list.files()
source("run_analysis.R")
source("run_analysis.R")
str(TidyData2)
TidyData2
getwd()
getwd()
setwd("C:/Users/skb67/Desktop/CourseraDS/Reproducible Research")
library(kernlab)
source("spamCaseStudy.R")
source("spamCaseStudy.R")
source("spamCaseStudy.R")
source("spamCaseStudy.R")
source("spamCaseStudy.R")
source("spamCaseStudy.R")
source("spamCaseStudy.R")
setwd("C:/Users/skb67/Desktop/CourseraDS/Reproducible Research/Week 2 Assignment/RepData_PeerAssesment1")
setwd("C:/Users/skb67/Desktop/CourseraDS/Reproducible Research/Week 2 Assignment/RepData_PeerAssessment1")
source("Complete_Code.R")
setwd("C:/Users/skb67/Desktop/CourseraDS/Reproducible Research/Week 2 Assignment/RepData_PeerAssessment1")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
source("Complete_Code.R")
